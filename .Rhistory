plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.factor(data2$eDNAorLipid),yaxt="n")
axis(2,1:3,labels = levels(as.factor(data2$Core)))
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.factor(data2$eDNAorLipid),yaxt="n")
axis(2,1:3,labels = levels(as.factor(data2$Core)))
data2 <- read.csv("LIPIDv2.csv")
View(data2)
datin <- data2[data2$Core=="GC017",]
palette(brewer.pal(3, "Set2"))
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.factor(data2$eDNAorLipid),yaxt="n")
axis(2,1:3,labels = levels(as.factor(data2$Core)))
data2 <- read.csv("LIPIDv2.csv")
datin <- data2[data2$Core=="GC017",]
palette(brewer.pal(3, "Set2"))
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.factor(data2$eDNAorLipid),yaxt="n")
axis(2,1:3,labels = levels(as.factor(data2$Core)))
library(RColorBrewer)
palette(brewer.pal(3, "Set2"))
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.factor(data2$eDNAorLipid),yaxt="n")
axis(2,1:3,labels = levels(as.factor(data2$Core)))
palette(brewer.pal(6, "Set2"))
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.factor(data2$eDNAorLipid)+1,yaxt="n")
axis(2,1:3,labels = levels(as.factor(data2$Core)))
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.numeric(as.factor(data2$eDNAorLipid))+1,yaxt="n")
axis(2,1:3,labels = levels(as.factor(data2$Core)))
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.numeric(as.factor(data2$eDNAorLipid))+2,yaxt="n")
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.numeric(as.factor(data2$eDNAorLipid))+2,yaxt="n",cex=4)
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.numeric(as.factor(data2$eDNAorLipid))+2,yaxt="n",cex=2)
axis(2,1:3,labels = levels(as.factor(data2$Core)))
plot(data2$Age,as.numeric(as.factor(data2$Core)),pch="|",col=as.numeric(as.factor(data2$eDNAorLipid))+2,yaxt="n",cex=2,ylim=c(0,4))
axis(2,1:3,labels = levels(as.factor(data2$Core)))
library(readr)
install.packages("readr")
# Combine and decompress the gzip parts, then read into a data frame
setwd("rawdata/MetagenomicFirstRound/")
con <- pipe("cat part.gz_*", "rb")
con
data <- read_csv(gzfile(con))
library(tidyverse)
library(reshape2)
library(ggridges)
library(vegan)
install.packages("tidyverse","reshape2")
install.packages("tidyverse")
library(tidyverse)
install.packages("reshape2")
library(ggridges)
install.packages("ggridges")
install.packages("vegan")
library(tidyverse)
library(reshape2)
library(ggridges)
library(vegan)
library(readr)
# Combine and decompress the gzip parts, then read into a data frame
setwd("rawdata/MetagenomicFirstRound/")
getwd()
con <- pipe("cat part.gz_*", "rb")
data <- read_csv(gzfile(con))
library(readr)
# Combine and decompress the parts
con <- pipe("cat part.gz_*", "rb") # Combine all parts
data <- read_csv(con)             # Read directly into read_csv
con <- pipe("cat part.gz_* | gunzip -c", "rb")
data <- read_csv(con)
close(con)
# Minimum amount of damage filter
DamMin = 0.0
D_Max = 1.0
#Lambda Likelihood Ratio
LR = 0
# Minimum reads for parsing taxa
MinRead = 100
# Minimum mean read length
MinLength = 35
# Let's make an animal subset of the data
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Metazoa",tax_path), grepl("", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata.genus <- df1[df1$tax_rank=="genus",]
genus.inputdata.wide <- dcast(inputdata.genus, tax_name ~ sample, value.var="N_reads")
genus.inputdata.wide[is.na(genus.inputdata.wide)] <- 0
rownames(genus.inputdata.wide) <- genus.inputdata.wide$tax_name
genus.inputdata.wide <- genus.inputdata.wide[,-1]
####====2.0 What does the damage look like? ====####
library(ggridges)
theme_set(theme_minimal())
# Let's make an animal subset of the data
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Metazoa",tax_path), grepl("", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2
factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
#metadata
metadata <- read.csv("metadata.csv")
setwd("../../")
#metadata
metadata <- read.csv("metadata.csv")
View(metadata)
#metadata
metadata <- read.csv("metadata.csv")
#metadata
metadata <- read.csv("metadata.csv")
View(metadata)
# Let's make an animal subset of the data
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Metazoa",tax_path), grepl("", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata.genus <- df1[df1$tax_rank=="genus",]
head(inputdata$sample2)
head(metadata$Sample)
match(inputdata$sample2,metadata$Sample)
inputdata$age <- metadata$age[match(inputdata$sample2,metadata$Sample)]
str(inputdata$age)
plot(inputdata$age)
# Let's make an animal subset of the data
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Metazoa",tax_path), grepl("genus", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata$age <- metadata$age[match(inputdata$sample2,metadata$Sample)]
plot(inputdata$age)
inputdata$site <- metadata$CoreID[match(inputdata$sample2,metadata$Sample)]
str(inputdata$site)
inputdata$site <- as.factor(metadata$CoreID[match(inputdata$sample2,metadata$Sample)])
str(inputdata$site)
raw.metazoa <- inputdata
print(ggplot(raw.metazoa, aes(x = MAP_damage,y=sample2,group=sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55,jittered_points = TRUE, position = "raincloud"))
ggplot(raw.metazoa, aes(x = MAP_damage,y=sample2,group=sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55,jittered_points = TRUE, position = "raincloud")
View(metadata)
plot(metadata$Dct,metadata$duplication.rate)
plot(metadata$Ct,metadata$Dct)
plot(metadata$Ct,metadata$duplication.rate)
plot(metadata$Dct,metadata$duplication.rate)
plot(metadata$Dct,metadata$low.complexity)
head(df1)
ggplot(raw.metazoa, aes(x = mean_L,y=sample2,group=sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55,jittered_points = TRUE, position = "raincloud")
# Let's make an animal subset of the data
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Bacteria",tax_path), grepl("genus", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata$age <- metadata$age[match(inputdata$sample2,metadata$Sample)]
inputdata$site <- as.factor(metadata$CoreID[match(inputdata$sample2,metadata$Sample)])
raw.metazoa <- inputdata
ggplot(raw.metazoa, aes(x = mean_L,y=sample2,group=sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55,jittered_points = TRUE, position = "raincloud")
# Let's make an animal subset of the data
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Viridiplantae",tax_path), grepl("genus", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata$age <- metadata$age[match(inputdata$sample2,metadata$Sample)]
inputdata$site <- as.factor(metadata$CoreID[match(inputdata$sample2,metadata$Sample)])
raw.metazoa <- inputdata
ggplot(raw.metazoa, aes(x = MAP_damage,y=sample2,group=sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55,jittered_points = TRUE, position = "raincloud")
ggplot(raw.metazoa, aes(x = mean_L,y=sample2,group=sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55,jittered_points = TRUE, position = "raincloud")
plot(metadata$Dct,metadata$duplication.rate,cex=log10(metadata$age),pch=16)
plot(metadata$Dct,metadata$duplication.rate,pch=16)
text(metadata$age,metadata$Dct,metadata$duplication.rate)
text(as.character(metadata$age),metadata$Dct,metadata$duplication.rate)
?text
text(metadata$Dct,metadata$duplication.rate,labels=as.character(metadata$age))
text(metadata$Dct,metadata$duplication.rate+2,labels=as.character(metadata$age))
plot(metadata$Dct,metadata$duplication.rate,pch=16)
text(metadata$Dct,metadata$duplication.rate+2,labels=as.character(metadata$age))
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Metazoa",tax_path), grepl("genus", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata$age <- metadata$age[match(inputdata$sample2,metadata$Sample)]
inputdata$site <- as.factor(metadata$CoreID[match(inputdata$sample2,metadata$Sample)])
raw.metazoa <- inputdata
# plants
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Viridiplantae",tax_path), grepl("genus", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata$age <- metadata$age[match(inputdata$sample2,metadata$Sample)]
inputdata$site <- as.factor(metadata$CoreID[match(inputdata$sample2,metadata$Sample)])
raw.plants <- inputdata
# bacteria
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Bacteria",tax_path), grepl("genus", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata$age <- metadata$age[match(inputdata$sample2,metadata$Sample)]
inputdata$site <- as.factor(metadata$CoreID[match(inputdata$sample2,metadata$Sample)])
raw.bacteria <- inputdata
raw.metazoa <- raw.metazoa %>%
mutate(sample2 = reorder(sample2, age))
# Create the plot
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55, jittered_points = TRUE, position = "raincloud") +
facet_wrap(~ coreID, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage") +
theme_minimal() +
theme(strip.text = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 8))
raw.metazoa <- raw.metazoa %>%
mutate(sample2 = reorder(sample2, age))
# Create the plot
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55, jittered_points = TRUE, position = "raincloud") +
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage") +
theme_minimal() +
theme(strip.text = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 8))
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ coreID, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage")
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage")
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3)
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.2)
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
plot(metadata$Ct,metadata$duplication.rate)
plot(metadata$Ct,metadata$duplication.rate,pch=16)
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(h=0,col="darkred")
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(v=0,col="darkred")
abline(v=0,col="darkred",lwd=3)
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.5,60,labels="Underamplified"
)
?text
text(0.5,60,labels="Underamplified", adj=1)
text(0.5,60,labels="Underamplified", adj=0)
abline(v=0,col="darkred",lwd=3)
text(0.5,60,labels="Underamplified", adj=0)
abline(v=0,col="darkred",lwd=3)
dev.off()
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.5,60,labels="Underamplified", adj=0)
text(0.2,60,labels="Underamplified", adj=0)
text(-0.2,60,labels="Overamplified", adj=1)
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,60,labels="Underamplified", adj=0)
text(-0.2,60,labels="Overamplified", adj=1)
plot(metadata$low.complexity,metadata$duplication.rate,pch=16)
plot(metadata$Ct,metadata$low.complexity,pch=16)
plot(metadata$Dct,metadata$low.complexity,pch=16)
plot(metadata$Dct,metadata$low.complexity,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,60,labels="Underamplified", adj=0)
text(-0.2,60,labels="Overamplified", adj=1)
# Let's make an animal subset of the data
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Metazoa",tax_path), grepl("genus", tax_rank), grepl("", sample))
plot(metadata$Dct,metadata$low.complexity,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,0.32,labels="Underamplified", adj=0)
text(-0.2,0.32,labels="Overamplified", adj=1)
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,60,labels="Underamplified", adj=0)
text(-0.2,60,labels="Overamplified", adj=1)
plot(metadata$Dct,metadata$low.complexity,pch=16)
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,60,labels="Underamplified", adj=0)
text(-0.2,60,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$duplication.rate+1.5,labels = metadata$age)
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,60,labels="Underamplified", adj=0)
text(-0.2,60,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$duplication.rate+1.5,labels = metadata$age,cex=0.7)
plot(metadata$Dct,metadata$low.complexity,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,0.32,labels="Underamplified", adj=0)
text(-0.2,0.32,labels="Overamplified", adj=1)
# Let's make an animal subset of the data
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Metazoa",tax_path), grepl("genus", tax_rank), grepl("", sample))
View(metadata)
plot(metadata$Dct,metadata$dedupReads)
plot(metadata$Dct,metadata$dedupReads,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,0.32,labels="Underamplified", adj=0)
text(-0.2,0.32,labels="Overamplified", adj=1)
text(0.2,2^8,labels="Underamplified", adj=0)
text(0.2,2*10^8,labels="Underamplified", adj=0)
text(0.2,2.2*10^8,labels="Underamplified", adj=0)
text(-0.2,2.2*10^8,labels="Overamplified", adj=1)
plot(metadata$Dct,metadata$dedupReads,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,2.2*10^8,labels="Underamplified", adj=0)
text(-0.2,2.2*10^8,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$dedupReads+1*10^6,labels = metadata$age,cex=0.7)
text(metadata$Dct,metadata$dedupReads+1*10^7,labels = metadata$age,cex=0.7)
plot(metadata$Dct,metadata$dedupReads,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,2.2*10^8,labels="Underamplified", adj=0)
text(-0.2,2.2*10^8,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$dedupReads+1*10^7,labels = metadata$age,cex=0.7)
text(metadata$Dct,metadata$dedupReads+1*10^7,labels = metadata$age,cex=0.7)
text(metadata$Dct,metadata$dedupReads+9*10^6,labels = metadata$age,cex=0.7)
text(metadata$Dct,metadata$dedupReads+5*10^6,labels = metadata$age,cex=0.7)
plot(metadata$Dct,metadata$dedupReads,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,2.2*10^8,labels="Underamplified", adj=0)
text(-0.2,2.2*10^8,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$dedupReads+5*10^6,labels = metadata$age,cex=0.7)
plot(metadata$Dct,metadata$dedupReads,pch=16,ylab="Post fastp reads")
abline(v=0,col="darkred",lwd=3)
text(0.2,2.2*10^8,labels="Underamplified", adj=0)
text(-0.2,2.2*10^8,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$dedupReads+5*10^6,labels = metadata$age,cex=0.7)
plot(metadata$Dct,metadata$duplication.rate,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,60,labels="Underamplified", adj=0)
text(-0.2,60,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$duplication.rate+1.5,labels = metadata$age,cex=0.7)
plot(metadata$Dct,metadata$low.complexity,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,0.32,labels="Underamplified", adj=0)
text(-0.2,0.32,labels="Overamplified", adj=1)
plot(metadata$Dct,metadata$dedupReads,pch=16,ylab="Post fastp reads")
plot(metadata$Dct,metadata$low.complexity,pch=16)
abline(v=0,col="darkred",lwd=3)
text(0.2,0.32,labels="Underamplified", adj=0)
text(-0.2,0.32,labels="Overamplified", adj=1)
plot(metadata$Dct,metadata$duplication.rate,pch=16,ylab="% duplication")
abline(v=0,col="darkred",lwd=3)
text(0.2,60,labels="Underamplified", adj=0)
text(-0.2,60,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$duplication.rate+1.5,labels = metadata$age,cex=0.7)
plot(metadata$Dct,metadata$low.complexity,pch=16,ylab="% low complexity")
abline(v=0,col="darkred",lwd=3)
text(0.2,0.32,labels="Underamplified", adj=0)
text(-0.2,0.32,labels="Overamplified", adj=1)
plot(metadata$Dct,metadata$dedupReads,pch=16,ylab="Post fastp reads")
abline(v=0,col="darkred",lwd=3)
text(0.2,2.2*10^8,labels="Underamplified", adj=0)
text(-0.2,2.2*10^8,labels="Overamplified", adj=1)
text(metadata$Dct,metadata$dedupReads+5*10^6,labels = metadata$age,cex=0.7)
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.metazoa, aes(x = mean_L, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
df1 <- data %>% filter(MAP_damage > DamMin, N_reads >= MinRead, mean_L > MinLength, MAP_significance  > LR,  grepl("Bacteria",tax_path), grepl("genus", tax_rank), grepl("", sample))
inputdata <- df1
inputdata$sample2 <- factor(inputdata$sample,levels= sort(unique(inputdata$sample),decreasing = TRUE))
inputdata$age <- metadata$age[match(inputdata$sample2,metadata$Sample)]
inputdata$site <- as.factor(metadata$CoreID[match(inputdata$sample2,metadata$Sample)])
raw.bacteria <- inputdata
ggplot(raw.bacteria, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Bacteria MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.plants, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.plants, aes(x = mean_L, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa Mean Length")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.plants, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.metazoa, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.metazoa, aes(x = mean_L, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Metazoa Mean Length")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.bacteria, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Bacteria MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.bacteria, aes(x = mean_L, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Bacteria Mean Length")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.plants, aes(x = MAP_damage, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Plants MAP Damage")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
ggplot(raw.plants, aes(x = mean_L, y = sample2, group = sample2)) +
geom_density_ridges2(scale = 3, alpha = 0.55) +  # Plot density ridges first
geom_point(position = position_jitter(height = 0.1, width = 0), alpha = 0.6) + # Add points above ridges
facet_wrap(~ site, scales = "free_y") + # Split into facets by coreID
labs(y = "Samples (ordered by age)", x = "MAP Damage",title = "Plants Mean Length")+
geom_text(aes(x = max(MAP_damage), label = age), hjust = -0.1, size = 3,nudge_y = 0.4)
library(ggplot2)
library(gganimate)
install.packages("gganimate")
library(ggplot2)
library(gganimate)
library(dplyr)
# Constants
G <- 6.67430e-11  # Gravitational constant
mass_core1 <- 1e12  # Mass of the first galaxy core
mass_core2 <- 1e12  # Mass of the second galaxy core
num_stars <- 100  # Number of massless stars
time_steps <- 500  # Number of time steps for the animation
# Create galaxy core positions
core1_pos <- c(-50, 0)  # Core 1 position (x, y)
core2_pos <- c(50, 0)   # Core 2 position (x, y)
# Initialize positions and velocities of stars
set.seed(123)
stars <- data.frame(
x = rnorm(num_stars, 0, 30),  # Random initial positions
y = rnorm(num_stars, 0, 30),
vx = rnorm(num_stars, 0, 0.1), # Initial velocity in x
vy = rnorm(num_stars, 0, 0.1)  # Initial velocity in y
)
# Function to compute the gravitational force
compute_force <- function(star_pos, core_pos, mass_core) {
dx <- core_pos[1] - star_pos[1]
dy <- core_pos[2] - star_pos[2]
distance <- sqrt(dx^2 + dy^2)
force_mag <- G * mass_core / distance^2
force_x <- force_mag * dx / distance
force_y <- force_mag * dy / distance
return(c(force_x, force_y))
}
# Run the simulation
for (t in 1:time_steps) {
forces <- matrix(0, nrow=num_stars, ncol=2)
for (i in 1:num_stars) {
# Compute forces from both cores
force1 <- compute_force(c(stars$x[i], stars$y[i]), core1_pos, mass_core1)
force2 <- compute_force(c(stars$x[i], stars$y[i]), core2_pos, mass_core2)
# Total force (sum of forces from both cores)
total_force <- force1 + force2
# Update velocities and positions (Euler method)
stars$vx[i] <- stars$vx[i] + total_force[1]
stars$vy[i] <- stars$vy[i] + total_force[2]
stars$x[i] <- stars$x[i] + stars$vx[i]
stars$y[i] <- stars$y[i] + stars$vy[i]
}
# Store positions at each time step for animation
if (t == 1) {
star_data <- data.frame(time = rep(t, num_stars), stars)
} else {
star_data <- rbind(star_data, data.frame(time = rep(t, num_stars), stars))
}
}
# Create an animated plot
ggplot(star_data, aes(x = x, y = y, color = time)) +
geom_point() +
geom_point(aes(x = core1_pos[1], y = core1_pos[2]), color = 'blue', size = 4) +
geom_point(aes(x = core2_pos[1], y = core2_pos[2]), color = 'red', size = 4) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "Stars orbiting two galaxy cores") +
transition_time(time) +
ease_aes('linear')
